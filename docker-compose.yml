version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: accusync-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-accusync}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-accusync_pass}
      POSTGRES_DB: ${POSTGRES_DB:-accusync}
    ports:
      - "5433:5432"  # 競合回避: 5432 → 5433
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U accusync"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accusync-network

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: accusync-redis
    ports:
      - "6380:6379"  # 競合回避: 6379 → 6380
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accusync-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: accusync-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    ports:
      - "9100:9000"  # 競合回避: 9000 → 9100
      - "9101:9001"  # 競合回避: 9001 → 9101
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - accusync-network

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accusync-api
    environment:
      DATABASE_URL: postgresql://accusync:accusync_pass@db:5432/accusync
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-accusync-storage}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production-12345678}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AI_PROVIDER: ${AI_PROVIDER:-openai}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      DEFAULT_ISSUER_NAME: ${DEFAULT_ISSUER_NAME:-株式会社AccuSync}
      DEFAULT_ISSUER_BRAND: ${DEFAULT_ISSUER_BRAND}
      DEFAULT_ISSUER_TAX_ID: ${DEFAULT_ISSUER_TAX_ID}
      DEFAULT_ISSUER_ADDRESS: ${DEFAULT_ISSUER_ADDRESS:-東京都渋谷区}
      DEFAULT_ISSUER_TEL: ${DEFAULT_ISSUER_TEL:-03-0000-0000}
      DEFAULT_ISSUER_EMAIL: ${DEFAULT_ISSUER_EMAIL:-info@accusync.example.com}
    ports:
      - "8100:8000"  # 競合回避: 8000 → 8100
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - ./templates:/app/templates
      - upload_temp:/tmp/accusync_uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - accusync-network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: accusync-celery-worker
    environment:
      DATABASE_URL: postgresql://accusync:accusync_pass@db:5432/accusync
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-accusync-storage}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production-12345678}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AI_PROVIDER: ${AI_PROVIDER:-openai}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - upload_temp:/tmp/accusync_uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info
    networks:
      - accusync-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: accusync-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8100/api/v1
      NODE_ENV: development
    ports:
      - "3100:3000"  # 競合回避: 3000 → 3100
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - accusync-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  upload_temp:
    driver: local

networks:
  accusync-network:
    driver: bridge
